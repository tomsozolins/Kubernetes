-------------------------------
Deploy ECK operator
Install custom resource definitions and the operator with its RBAC rules:
# kubectl create -f https://download.elastic.co/downloads/eck/1.7.0/crds.yaml
# kubectl apply -f https://download.elastic.co/downloads/eck/1.7.0/operator.yaml

Monitor the operator logs:
# kubectl -n elastic-system logs -f statefulset.apps/elastic-operator
-----------------------------
Create Kibana saved objects encrypted key:
# kubectl create secret generic kibana-saved-objects-encrypted-key --from-literal=xpack.encryptedSavedObjects.encryptionKey="$(cat /dev/urandom | tr -dc 'a-zA-Z0-9' | fold -w 32 | head -n 1)"

# vi elastic_stack.yaml

apiVersion: kibana.k8s.elastic.co/v1
kind: Kibana
metadata:
  name: kibana
spec:
  version: 7.14.0
  count: 1
  elasticsearchRef:
    name: "elasticsearch"
  secureSettings:
  - secretName: kibana-saved-objects-encrypted-key
  http:
    service:
      spec:
        type: LoadBalancer
        ports:
        - name: https
          protocol: TCP
          port: 443
          targetPort: 5601
    #tls:
      #selfSignedCertificate:
        #subjectAltNames:
        #- ip: 192.168.0.1
        #- dns: example.com
  # this shows how to customize the Kibana pod
  # with labels and resource limits
  podTemplate:
    metadata:
      labels:
        app: kibana
    spec:
      containers:
      - name: kibana
        resources:
          limits:
            memory: 1Gi
            cpu: 1
---
# This sets up an Elasticsearch cluster with 3 nodes.
apiVersion: elasticsearch.k8s.elastic.co/v1
kind: Elasticsearch
metadata:
  name: elasticsearch
spec:
  version: 7.14.0
  nodeSets:
  - name: default
    count: 4
    config:
      node.master: true
      node.data: true
      node.ingest: true
      node.ml: true
      node.store.allow_mmap: false
    podTemplate:
      metadata:
        labels:
          app: elasticsearch
      spec:
        initContainers:
        - name: sysctl
          securityContext:
            privileged: true
          command: ['sh', '-c', 'sysctl -w vm.max_map_count=262144']
        containers:
        - name: elasticsearch
          # specify resource limits and requests
          resources:
            requests:
              memory: 4Gi
              cpu: 0.5
            limits:
              memory: 4Gi
              cpu: 1
          env:
          - name: ES_JAVA_OPTS
            value: "-Xms2g -Xmx2g"
    # request 10Gi of persistent data storage for pods in this topology element
    volumeClaimTemplates:
    - metadata:
        name: elasticsearch-data
      spec:
        accessModes:
        - ReadWriteOnce
        storageClassName: rook-ceph-block
        resources:
          requests:
            storage: 2000Gi
  http:
    service:
      spec:
        # expose this cluster Service with a LoadBalancer
        type: LoadBalancer



# kubectl apply -f elastic_stack.yaml
------------------
Useful commands
Elastic
# kubectl get elasticsearch
# kubectl get service elasticsearch-es-http

# kubectl get elasticsearch -n logging

Get elastic user pass:
# echo $(kubectl get secret elasticsearch-es-elastic-user -o go-template='{{.data.elastic | base64decode}}')

Get external IP:
# kubectl get service elasticsearch-es-http

To test it you must first download the automatically generated SSL certificate. You can do it by running:
# kubectl get secret elasticsearch-es-http-certs-public -o 'go-template={{index .data "ca.crt"}}' | base64 --decode >> ca.crt
Then use to perform a GET request at https://<external-ip>:9200


Kibana
Get Kibana encrypted key:
# kubectl get secret kibana-saved-objects-encrypted-key -o yaml
# echo -n "<secret-value>" | base64 --decode
# kubectl delete secret kibana-saved-objects-encrypted-key

Get external IP:
# kubectl get service kibana-kb-http
